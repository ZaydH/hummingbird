class ControllerToWorkerMessage(object):
  """
  Class defines the message sent from the controller to the workers.  It takes a task as defined
  by the user and then sends it.  This class assumes that the generated tasks are PICKABLE although
  it does not explicitly check.
  """

  TASK_KEY = "task"
  SHOULD_EXIT_KEY = "should_exit"

  @staticmethod
  def build(terminate_worker, generated_task):
    """
    Creates a message in the format of a Python dictionary.  The Python fields are:
      * should_exit - bool - Indicates whether the worker should terminate.
      * task - This is

    :param terminate_worker: True if the slave/worker should be terminated.
    :type terminate_worker: bool

    :param generated_task: Tasks generated by the AbstractTask() class.

    :return: Message to be transmitted
    :rtype: dict
    """
    message = dict()
    message[ControllerToWorkerMessage.SHOULD_EXIT_KEY] = terminate_worker
    message[ControllerToWorkerMessage.TASK_KEY] = generated_task
    return message

  @staticmethod
  def extract_should_exit(msg):
    """
    Extracts whether the worker should terminate.  This is extracted from the message transmitted
    from the master.

    :param msg: Message transmitted from the master.
    :type msg: dict

    :return: True if the worker should exit/terminate.
    :rtype: bool
    """
    return msg[ControllerToWorkerMessage.SHOULD_EXIT_KEY]

  @staticmethod
  def extract_generated_task(msg):
    """
    Extracts the AbstractTask() sent from the controller to a worker.

    :param msg: Message sent to a worker.
    :type msg: dict

    :return: Task generated.
    """
    return msg[ControllerToWorkerMessage.TASK_KEY]
