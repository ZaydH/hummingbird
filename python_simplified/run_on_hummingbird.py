import logging

from mpi.abstract_classes import AbstractWorker, AbstractTask
from mpi.hb_framework import HummingbirdFramework


class Task(AbstractTask):
  """
  Class that defines tasks to be performed by workers and then processes the results generated by
  those workers.
  """
  def __init__(self):
    AbstractTask.__init__(self)
    #
    # Add code below that may be needed in your "process_results" function.
    #

  @staticmethod
  def task_generator():
    """
    Creates a generator for defining the set of tasks to be performed.  The tasks generated in this
    method are individually sent to workers.

    The tasks generated must be PICKLABLE.  If it is not pickable reliably, then the program will
    crash.

    :return: A single task to be sent to the worker.
    """
    #
    # Adds the generator code below.
    #
    pass

  def process_results(self, results_dict):
    """
    Saves the worker results to the results CSV file.

    :param results_dict: Results from the worker
    :type results_dict: dict
    """
    #
    # Add code here that takes the results_dict sent from a worker (see method "execute_task")
    # and processes those results.
    #
    pass


class Worker(AbstractWorker):
  """
  The worker class is what performs the tasks sent from the master.  The parameter, \p msg, will
  be a Python dictionary.  The worker's results are sent back in the form of a dictionary.
  """
  def execute_task(self, task_msg):
    """
    Executes the task passed by the master.

    :param task_msg: Message from the master.  This will be identical to what was created in the
                     "task_generator" method.

    :return: Information to be passed back to the master.
    :rtype: dict
    """
    #
    # Put your code below that does a single worker task.  The results generated by the worker must
    # then be packaged in a dictionary and sent back.
    #

    # Execute the worker task using the information in the message
    # ... - Use "task_msg"

    # Build the results and send them back.
    results_dict = dict()
    return results_dict


if __name__ == '__main__':
  # If you want to manage any command line inputs, put it here
  # ...

  # Parameters to manage the Hummingbird framework.  These must be placed before the "run" method.
  # If you do not specify values for these parameters below, then the default values will be used.
  # HummingbirdFramework.log_file = "hb_logs.txt"
  # HummingbirdFramework.log_level = logging.INFO

  # Nothing should be placed after the run.
  # The run method manages both workers and the controller automatically.
  HummingbirdFramework.run(Task, Worker)
